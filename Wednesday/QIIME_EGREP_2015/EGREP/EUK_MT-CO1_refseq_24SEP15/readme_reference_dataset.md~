# MT-CO1 Reference dataset creation
##Create GenBank Search phrase
<pre>
cox1_synonyms = ['MT-CO1','cox1','cox 1','COX1','COX 1','COI','CO I','coi','COXi', 'COX i',
                 'COXI','COX I', 'co i','coI','co I','cox I','coxI',
                 'cytochome oxidase 1','Cytochome oxidase 1','Cytochome Oxidase 1',
                 'cytochome oxidase I','Cytochome oxidase I', 'Cytochome Oxidase I',
                 'cytochome oxidase subunit 1','Cytochome oxidase subunit 1','Cytochome Oxidase subunit 1',
                 'Cytochome Oxidase Subunit 1',
                 'cytochome oxidase subunit I','Cytochome oxidase subunit I','Cytochome Oxidase subunit I',
                 'Cytochome Oxidase Subunit I',
                 'cytochrome c oxidase subunit I', 'Cytochrome c oxidase subunit I', 'Cytochrome C oxidase subunit I',
                 'Cytochrome C Oxidase subunit I', 'Cytochrome C Oxidase Subunit I',
                 'cytochrome c oxidase subunit 1', 'Cytochrome c oxidase subunit 1', 'Cytochrome C oxidase subunit 1',
                 'Cytochrome C Oxidase subunit 1', 'Cytochrome C Oxidase Subunit 1']  



search_phrase = 'AND ('

for syn in cox1_synonyms:
    search_phrase += "%s [GENE] OR %s [PROT] OR "%(syn,syn)

search_phrase = search_phrase[:-3]+')'
search_phrase = 'srcdb_refseq[PROP] AND Eukaryota[orgn]'+ search_phrase
</pre>
## The search phrase
<pre>
srcdb_refseq[PROP] AND Eukaryota[orgn]AND (MT-CO1 [GENE] OR MT-CO1 [PROT] OR cox1 [GENE] OR cox1 [PROT] OR cox 1 [GENE] OR cox 1 [PROT] OR COX1 [GENE] OR COX1 [PROT] OR COX 1 [GENE] OR COX 1 [PROT] OR COI [GENE] OR COI [PROT] OR CO I [GENE] OR CO I [PROT] OR coi [GENE] OR coi [PROT] OR COXi [GENE] OR COXi [PROT] OR COX i [GENE] OR COX i [PROT] OR COXI [GENE] OR COXI [PROT] OR COX I [GENE] OR COX I [PROT] OR co i [GENE] OR co i [PROT] OR coI [GENE] OR coI [PROT] OR co I [GENE] OR co I [PROT] OR cox I [GENE] OR cox I [PROT] OR coxI [GENE] OR coxI [PROT] OR cytochome oxidase 1 [GENE] OR cytochome oxidase 1 [PROT] OR Cytochome oxidase 1 [GENE] OR Cytochome oxidase 1 [PROT] OR Cytochome Oxidase 1 [GENE] OR Cytochome Oxidase 1 [PROT] OR cytochome oxidase I [GENE] OR cytochome oxidase I [PROT] OR Cytochome oxidase I [GENE] OR Cytochome oxidase I [PROT] OR Cytochome Oxidase I [GENE] OR Cytochome Oxidase I [PROT] OR cytochome oxidase subunit 1 [GENE] OR cytochome oxidase subunit 1 [PROT] OR Cytochome oxidase subunit 1 [GENE] OR Cytochome oxidase subunit 1 [PROT] OR Cytochome Oxidase subunit 1 [GENE] OR Cytochome Oxidase subunit 1 [PROT] OR Cytochome Oxidase Subunit 1 [GENE] OR Cytochome Oxidase Subunit 1 [PROT] OR cytochome oxidase subunit I [GENE] OR cytochome oxidase subunit I [PROT] OR Cytochome oxidase subunit I [GENE] OR Cytochome oxidase subunit I [PROT] OR Cytochome Oxidase subunit I [GENE] OR Cytochome Oxidase subunit I [PROT] OR Cytochome Oxidase Subunit I [GENE] OR Cytochome Oxidase Subunit I [PROT] OR cytochrome c oxidase subunit I [GENE] OR cytochrome c oxidase subunit I [PROT] OR Cytochrome c oxidase subunit I [GENE] OR Cytochrome c oxidase subunit I [PROT] OR Cytochrome C oxidase subunit I [GENE] OR Cytochrome C oxidase subunit I [PROT] OR Cytochrome C Oxidase subunit I [GENE] OR Cytochrome C Oxidase subunit I [PROT] OR Cytochrome C Oxidase Subunit I [GENE] OR Cytochrome C Oxidase Subunit I [PROT] OR cytochrome c oxidase subunit 1 [GENE] OR cytochrome c oxidase subunit 1 [PROT] OR Cytochrome c oxidase subunit 1 [GENE] OR Cytochrome c oxidase subunit 1 [PROT] OR Cytochrome C oxidase subunit 1 [GENE] OR Cytochrome C oxidase subunit 1 [PROT] OR Cytochrome C Oxidase subunit 1 [GENE] OR Cytochrome C Oxidase subunit 1 [PROT] OR Cytochrome C Oxidase Subunit 1 [GENE] OR Cytochrome C Oxidase Subunit 1 [PROT] )
</pre>
## The GenBank file with the matches
`./sequence_24SEP15.gb`

## Write a fasta file
<pre>
from Bio import SeqIO

gb = '../Dropbox/qiime_pipline_test/EUK_MT-CO1_refseq_24SEP15/sequence_24SEP15.gb'
records = SeqIO.parse(gb,'genbank')

\#taxonomy_hndl = open('../Dropbox/qiime_pipline_test/EUK_MT-CO1_refseq_24SEP15/taxonomy.txt','wt')
fasta_hndl = open('../Dropbox/qiime_pipline_test/EUK_MT-CO1_refseq_24SEP15/ref_seq.fasta', 'wt')

recordv_ids = {}

for record in records:
    
    \# remove version from accession
    record_id = record.id.split('.')[0]
    
    organism = record.features[0].qualifiers['organism'][0]
    recordv_ids[record.id] = organism
    
    \# format taxonomy like silva111
    \#taxonomy = record.annotations['taxonomy']
    
    \#while not taxonomy[0] == 'Eukaryota':
    \#    taxonomy.pop(0)
    \#for i in range(1,len(taxonomy)):
    \#    if not '__' in taxonomy[i]:
    \#        taxonomy[i] = '; __'+taxonomy[i]
    \#while len(taxonomy) < 6:
    \#    taxonomy.append('; __')
    
    #taxonomy_line = '{0[0]}{0[1]}{0[2]}{0[3]}{0[4]}{0[5]}'.format(taxonomy)
    #taxonomy_set.add(taxonomy_line)
    
    # get the cox 1 gene sequence
    coi_gene = None
    
    found = 0
    for f in record.features:
        if f.type == 'gene':
            if ('gene' in f.qualifiers and f.qualifiers['gene'][0] in cox1_synonyms or
                'product' in f.qualifiers and f.qualifiers['product'][0] in cox1_synonyms):
                coi_gene = f
                found += 1
    if not found:
        for f in record.features:
            if f.type == 'gene':
                if ('gene_synonym' in f.qualifiers and f.qualifiers['gene_synonym'][0] in cox1_synonyms):
                    coi_gene = f
                    found += 1
    
    if not found:
        for f in record.features:
            if f.type == 'gene':
                if ('note' in f.qualifiers and f.qualifiers['note'][0] in cox1_synonyms):
                    coi_gene = f
                    found += 1
    if not found:
        for f in record.features:
            if f.type == 'CDS':
                if ('gene' in f.qualifiers and f.qualifiers['gene'][0] in cox1_synonyms or
                    'product' in f.qualifiers and f.qualifiers['product'][0] in cox1_synonyms):
                    coi_gene = f
                    found += 1
    if found > 1:
        print "%s found more than 1"%record_id
    elif found == 0:
        print "%s not found"%record_id
        
    if found:
        coi_seq = coi_gene.extract(record)   

        \# Write to files
        \# taxonomy_hndl.write('%s\t%s\n'%(record_id,taxonomy_line))
        fasta_hndl.write('>%s %s\n%s\n'%(record_id,organism,coi_seq.seq))    
  
`fasta_hndl.close()`

</pre>

## Write a taxonomy file

<pre>
from Bio import Entrez
Entrez.email = "amirsh6@gmail.com"

taxonomy_hndl = open('../Dropbox/qiime_pipline_test/EUK_MT-CO1_refseq_24SEP15/taxonomy.txt','wt')

levels = ['kingdom', 'phylum', 'class', 'order', 'family', 'genus']


for record in recordv_ids:
    ind_taxonomy=''
    #  print "fetch taxonomy for taxid: %s" %tid
    #first check if there is a valid taxonomy available for the taxon on Genbank based on the taxon name (not using taxid because a dummy taxid such as 'denovo7' will yield a result because entrez will interpret this as taxid '7' which will yield a bacterium
    handle = Entrez.esearch(db="Taxonomy", term=recordv_ids[record])      #search the taxonomy database for the taxon by organism name
    taxon = Entrez.read(handle)
    if taxon["IdList"]:     #That this exists means there is a valid taxonomy for this taxon name
        handle = Entrez.efetch(db="Taxonomy", id=taxon["IdList"][0])      #Now I can just fetch the taxonomy via the taxid
        taxon = Entrez.read(handle)
        for lev in levels: #this will go through all valid taxonomic levels as defined in the list above
            name = '__'
            for i in range(len(taxon[0]['LineageEx'])):     #loop through the taxonomy for the current taxon
                if taxon[0]['LineageEx'][i]['Rank'] == lev:     #if we hit one of the valid levels
                    name = taxon[0]['LineageEx'][i]['ScientificName'] #get the actual taxonomy at this level (and replace any spaces with _ in case
            if not lev == 'kingdom':
                name = "; %s"%name
            ind_taxonomy += name #add the taxonomy level abbreviation as defined in the dictionary above to the string and add the whole thing to the list holding the full taxonomy for this taxon
            #print ind_taxonomy
    taxonomy_hndl.write('%s\t%s\n'%(record.split('.')[0], ind_taxonomy))
taxonomy_hndl.close()                          
</pre>
## Correct format 
<pre>
kept_records = []
old_lines = open('../Dropbox/qiime_pipline_test/EUK_MT-CO1_refseq_24SEP15/7level_taxonomy.txt', 'r').readlines()
new_lines = []
for l in old_lines:
    ID, T = l.rstrip().split('\t')
    taxonomy = T.split('; ')
    if not taxonomy[0] == '__' and len(taxonomy) == 7:
        kept_records.append(ID)
        for i in range(len(taxonomy)):
            if not taxonomy[i] == '__' and 0 < i < 6:
                taxonomy[i] = '__'+taxonomy[i]
            elif 0 < i < 6 and not taxonomy[i+1] == '__':
                taxonomy[i] = '__' + taxonomy[i+1]
        taxonomy[6] = taxonomy[6].replace(' ', '_')
        new_lines.append('{0}\t{1[0]}; {1[1]}; {1[2]}; {1[3]}; {1[4]}; {1[5]}; {1[6]}'.format(ID,taxonomy))


</pre>
## Match sequences to taxonomy records
<pre>
from Bio import SeqIO

rec_ids = [l.split('\t')[0] for l in new_lines]

gb = '../Dropbox/qiime_pipline_test/EUK_MT-CO1_refseq_24SEP15/sequence_24SEP15.gb'
records = SeqIO.parse(gb,'genbank')

#taxonomy_hndl = open('../Dropbox/qiime_pipline_test/EUK_MT-CO1_refseq_24SEP15/taxonomy.txt','wt')
fasta_hndl = open('../Dropbox/qiime_pipline_test/EUK_MT-CO1_refseq_24SEP15/ref_seq.fasta', 'wt')

recordv_ids = {}

for record in records:
    if record.id.split('.')[0] in rec_ids:
        # remove version from accession
        record_id = record.id.split('.')[0]

        organism = record.features[0].qualifiers['organism'][0]
        recordv_ids[record.id] = organism

        # format taxonomy like silva111
        #taxonomy = record.annotations['taxonomy']

        #while not taxonomy[0] == 'Eukaryota':
        #    taxonomy.pop(0)
        #for i in range(1,len(taxonomy)):
        #    if not '__' in taxonomy[i]:
        #        taxonomy[i] = '; __'+taxonomy[i]
        #while len(taxonomy) < 6:
        #    taxonomy.append('; __')

        #taxonomy_line = '{0[0]}{0[1]}{0[2]}{0[3]}{0[4]}{0[5]}'.format(taxonomy)
        #taxonomy_set.add(taxonomy_line)

        # get the cox 1 gene sequence
        coi_gene = None

        found = 0
        for f in record.features:
            if f.type == 'CDS':
                if ('gene' in f.qualifiers and f.qualifiers['gene'][0] in cox1_synonyms or
                    'product' in f.qualifiers and f.qualifiers['product'][0] in cox1_synonyms):
                    coi_gene = f
                    found += 1
        if not found:
            for f in record.features:
                if f.type == 'CDS':
                    if ('gene_synonym' in f.qualifiers and f.qualifiers['gene_synonym'][0] in cox1_synonyms):
                        coi_gene = f
                        found += 1

        if not found:
            for f in record.features:
                if f.type == 'CDS':
                    if ('note' in f.qualifiers and f.qualifiers['note'][0] in cox1_synonyms):
                        coi_gene = f
                        found += 1

        if found > 1:
            print "%s found more than 1"%record_id
        elif found == 0:
            print "%s not found"%record_id
            if record_id in rec_ids:
                rec_ids.remove(record_id)

        if found:
            coi_seq = coi_gene.extract(record)   

            # Write to files
            # taxonomy_hndl.write('%s\t%s\n'%(record_id,taxonomy_line))
            fasta_hndl.write('>%s %s\n%s\n'%(record_id,organism,coi_seq.seq))    

    
#taxonomy_hndl.close()       
fasta_hndl.close()
new_lines = [l for l in new_lines if l.split('\t')[0] in rec_ids]
hndl = open('../Dropbox/qiime_pipline_test/EUK_MT-CO1_refseq_24SEP15/7level_taxonomy.txt', 'wt')

for l in new_lines:
    hndl.write(l+'\n')
    
hndl.close()

</pre>